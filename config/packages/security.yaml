security:
    erase_credentials: false
    enable_authenticator_manager: true
    password_hashers:
        App\Entity\User:
            algorithm: bcrypt
            cost: 15
        default:
            algorithm: bcrypt
            cost: 15
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
        app_user_provider:
            id: app.user_provider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        api-doc:
            pattern: ^/api-doc
            security: false

        i18n-texts:
            pattern: ^/i18n/texts
            methods: [GET]
            security: false

        token-refresh:
            pattern:  ^/token/refresh
            stateless: true
            security: false

        reset-password:
            pattern:  ^/reset-password
            stateless: true
            security: false

        update-password:
            pattern:  ^/update-password
            security: false

        authentication:
            pattern:   ^/authenticate
            provider: app_user_provider
            stateless: true
            json_login:
                check_path:          /authenticate
                success_handler:     lexik_jwt_authentication.handler.authentication_success
                failure_handler:     lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/
            provider: app_user_provider
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/$,                                      roles: PUBLIC_ACCESS, requires_channel: 'https'  }
        - { path: ^/(_(profiler|wdt)|css|images|js)/,       roles: PUBLIC_ACCESS, requires_channel: 'https'  }
        - { path: ^/api-doc,                                roles: PUBLIC_ACCESS   }
        - { path: '^/token/refresh',                        roles: PUBLIC_ACCESS   }
        - { path: '^/reset-password',                       roles: PUBLIC_ACCESS   }
        - { path: '^/authenticate',                         roles: PUBLIC_ACCESS   }
        - { path: ^/,                                       roles: ROLE_USER       }
